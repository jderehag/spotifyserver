Short description of protocol.

1. Introduction
TCP/IP is used for this client-server protocol, which is build on request and response messages.
Both clients and server should be able to send requests and responses at any time.

A message consists of a 12-byte message header , followed by 0 or more bytes of TLV encoded data   


2. Message Header Format
Byte:
0..3  Message Length 
4..7  Message Type     
8..11 Message Sequence Number


2.1 Message length
Total length of message including the header.


2.2 Message Type
32-bit value determining the message type.  
Messages are either a request(req) or response(rsp) or one-way indication(ind). 


2.3 Message Sequence Number
Both clients and server have their own sequence numbers.
The sequence number should be increased for each request or indication sent.
When sending a response message, the sequence number from the request should be used.  


3. The protocol is TLV based
Each TLV consist of three fields 
Type         32-bit  value
Length       32-bit  value
Value        Length bytes

The Length field should include the total size of all sub-TLVs.


4. Description of different messages

4.1 Session control messages

4.1.1 HELLO_REQ

4.1.2 HELLO_RSP


4.2 Metadata messages

4.2.1	GET_PLAYLISTS_REQ
Client call to get Folders and PlayLists
This is only a header message, no TLVs needed. Total size 12 bytes


4.2.2	GET_PLAYLISTS_RSP
A playlist response always contains at least the "root" folder, which should contain all playlists if no
extra folders are available 
MessageHeader
TLV_FOLDER        root-folder. Required. May be the last TLV, if no sub folders or playlists exist.
  TLV_NAME      
  TLV_FOLDER 0..n        
    TLV_NAME   
    TLV_FOLDER 0..n    
      TLV_NAME
      TLV_PLAYLIST 0..n
        TLV_NAME
        TLV_LINK   
    TLV_PLAYLIST 0..n     
      TLV_NAME
      TLV_LINK
  TLV_PLAYLIST 0..n       
    TLV_NAME
    TLV_LINK

4.2.3	GET_TRACKS_REQ
Client call to get all tracks for a specific playlist.
TLV_PLAYLIST 
  TLV_LINK 

4.2.4	GET_TRACKS_RSP
Server response containing all tracks for a specific playlist
can be only a header without TLV's for an empty playlist
TLV_TRACK              0..n
  TLV_NAME
  TLV_LINK
  TLV_TRACK_DURATION
  TLV_TRACK_INDEX
  TLV_ARTIST 1..n
    TLV_NAME
    TLV_LINK
  TLV_ALBUM
    TLV_NAME
    TLV_LINK

4.2.5	GET_IMAGE_REQ
Client request to get an image for the item identified by the link
TLV_LINK

4.2.6	GET_IMAGE_RSP
Server response with image data
TLV_IMAGE
  TLV_IMAGE_TYPE
  TLV_IMAGE_DATA

4.2.7	GENERIC_SEARCH_REQ
This message is a generic (i.e search not specific for track/artist/album)
TLV_SEARCH_QUERY
	
4.2.8	GENERIC_SEARCH_RSP
TLV_TRACK			0..n
  TLV_NAME
  TLV_LINK
  TLV_TRACK_DURATION
  TLV_ARTIST 1..n
    TLV_NAME
    TLV_LINK
  TLV_ALBUM
    TLV_NAME
    TLV_LINK


4.3 Playback handling messages

4.3.1	PLAY_REQ
This message requires a single TLV, identifying the item (track, playlist, etc..) to be played.
An optional TLV_TRACK_INDEX can be provided, if present it identifies the first track (in for example a playlist) to be played 
TLV_LINK
TLV_TRACK_INDEX	0..1

4.3.2	PLAY_RSP
Server response to a client request to play an item
No TLVs needed.

4.3.3	PLAY_CONTROL_REQ
Request server to perform specified action on playback (prev/next/pause/resume) or enable/disable play modes. For enable/disable zero means off and non-zero means on
TLV_PLAY_OP	0..n
TLV_PLAY_MODE_SHUFFLE	0..1
TLV_PLAY_MODE_REPEAT	0..1

4.3.4	PLAY_CONTROL_RSP
Empty message to acknowledge reception of request


4.4 Status messages

4.4.1	GET_STATUS_REQ
Request to get the current state of the server

4.4.2	GET_STATUS_RSP
Server state (playing/idle etc), if available also current track and progress into current track
TLV_STATE
TLV_PROGRESS	0..1
TLV_TRACK		0..1
  TLV_NAME
  TLV_LINK
  TLV_TRACK_DURATION
  TLV_ARTIST	1..n
    TLV_NAME
    TLV_LINK
  TLV_ALBUM
    TLV_NAME
    TLV_LINK

4.4.3	STATUS_IND
Sent spontanously by server when state changes, has same contents as GET_STATUS_RSP